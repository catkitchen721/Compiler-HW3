/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */

extern YYSTYPE yylval; //YYSTYPE
char buf[256];
int curr_scope;
void dump_symbol();
char *error_type;

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, 256 - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return ADD; }
"-" 	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return SUB; }
"*" 	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return MUL; }
"/" 	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return DIV; }
"%"     { if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return MOD; }
"++"    { if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return INC; }
"--"    { if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return DEC; }

 /* Relational */
">"		{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return MT; }
"<"		{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return LT; }
">="	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return MTE; }
"<="	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return LTE; }
"=="	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return EQ; }
"!="	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return NE; }

 /* Assignment */
"="		{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return ASGN; }
"+="	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return ADDASGN; }
"-="	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return SUBASGN; }
"*="	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return MULASGN; }
"/="	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return DIVASGN; }
"%="	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return MODASGN; }

 /* Logical */
"&&"	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return AND; }
"||"	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return OR; }
"!"		{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext);return NOT; }

 /* Delimiters */
"("		{ if(strcmp(error_type, "") == 0)CONCAT return LB; }
")"		{ if(strcmp(error_type, "") == 0)CONCAT return RB; }
"{"		{ if(strcmp(error_type, "") == 0 || strcmp(error_type, "syntax error") == 0 )CONCAT curr_scope++; return LCB; }
"}"		{ if(strcmp(error_type, "") == 0)CONCAT return RCB; }
"["		{ if(strcmp(error_type, "") == 0)CONCAT return LSB; }
"]"		{ if(strcmp(error_type, "") == 0)CONCAT return RSB; }
","		{ if(strcmp(error_type, "") == 0)CONCAT return COMMA; }

 /* Print Keywords */	
"print"		{ if(strcmp(error_type, "") == 0)CONCAT return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ if(strcmp(error_type, "") == 0)CONCAT return IF; }
"else"		{ if(strcmp(error_type, "") == 0)CONCAT return ELSE; }
"for"		{ if(strcmp(error_type, "") == 0)CONCAT return FOR; }
"while"		{ if(strcmp(error_type, "") == 0)CONCAT return WHILE; }

 /* Declaration Keywords */
"void"		{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext); return VOID; }
"int"		{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext); return INT; }
"float"  	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext); return FLOAT; }
"string"  	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext); return STRING; }
"bool"  	{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext); return BOOL; }

 /* boolean Keywords */
"true"      { if(strcmp(error_type, "") == 0)CONCAT yylval.bool_val = 1; return TRUE_RESULT; }
"false"     { if(strcmp(error_type, "") == 0)CONCAT yylval.bool_val = 0; return FALSE_RESULT; }

"return"    { if(strcmp(error_type, "") == 0)CONCAT return RET; }
"continue"	{ if(strcmp(error_type, "") == 0)CONCAT return CONTINUE; }
"break"	{ if(strcmp(error_type, "") == 0)CONCAT return BREAK; }

 /* String Constant */
\"				        { if(strcmp(error_type, "") == 0)CONCAT BEGIN STRING_STATE; }
<STRING_STATE>\"		{ if(strcmp(error_type, "") == 0)CONCAT BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext); return STR_CONST; }

 /* Number Constant */
{integer}	{ if(strcmp(error_type, "") == 0)CONCAT yylval.i_val = atoi(yytext); return I_CONST; }
{float}	    { if(strcmp(error_type, "") == 0)CONCAT yylval.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ if(strcmp(error_type, "") == 0)CONCAT BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ if(strcmp(error_type, "") == 0)CONCAT BEGIN COMMENT; }
<COMMENT>\n			{ if(strcmp(error_type, "") == 0)CONCAT 
	/*(strcmp(buf, "\n") == 0)?printf("%d:%s", yylineno, buf):printf("%d: %s", yylineno, buf);*/ 
	BEGIN COMMENT; return NL; }
<COMMENT>"*"		{ if(strcmp(error_type, "") == 0)CONCAT BEGIN COMMENT; }
<COMMENT>"*/"		{ if(strcmp(error_type, "") == 0)CONCAT BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ if(strcmp(error_type, "") == 0)CONCAT }

 /* Variable ID */
 {id}       { if(strcmp(error_type, "") == 0)CONCAT yylval.string = strdup(yytext); return ID; }

 /* others */

[;]         { if(strcmp(error_type, "") == 0)CONCAT return SEMICOLON; }
[\n]        { if(strcmp(error_type, "") == 0)CONCAT 
	/*(strcmp(buf, "\n") == 0)?printf("%d:%s", yylineno, buf):printf("%d: %s", yylineno, buf);*/ 
	return NL; }
[ \t]		{ if(strcmp(error_type, "") == 0)CONCAT } /* Ignore */
[^ \t\n] 	{ if(strcmp(error_type, "") == 0)CONCAT } /* Ignore other charactor sets */
<<EOF>>     { /*static int once = 0; return once++ ? 0 : SEMICOLON;*/ return 0; }

%%

int yywrap()
{
    return 1;
}
